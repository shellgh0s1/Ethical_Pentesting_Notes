Cross-Site Scripting (XSS) injection techniques

1. HTML Tag Injection:
   - Description: Cross-Site Scripting can occur by injecting malicious code within HTML tags.
   - Example: Injecting `<script>alert('XSS')</script>` within an HTML tag.

2. HTML Attribute Injection:
   - Description: Cross-Site Scripting can be achieved by injecting code within HTML attributes.
   - Example: Modifying an HTML attribute like `<a href="javascript:alert('XSS')">Link</a>`.

3. Event Attribute Injection:
   - Description: Cross-Site Scripting can be triggered by injecting malicious code within HTML event attributes.
   - Example: Utilizing an event attribute like `<img src="image.jpg" onerror="alert('XSS')">`.

4. JavaScript Execution:
   - Description: Cross-Site Scripting can be initiated by executing JavaScript code directly.
   - Example: Executing JavaScript code using the `javascript:` protocol handler, such as `javascript:alert('XSS')`.

5. HTML Comment Injection:
   - Description: Cross-Site Scripting can be performed by injecting code within HTML comments.
   - Example: Concealing malicious code within an HTML comment, like `<!-- <script>alert('XSS')</script> -->`.

6. CSS Injection:
   - Description: Cross-Site Scripting can be exploited by injecting code within CSS properties.
   - Example: Inserting malicious code into a CSS property like `<style>body { background-image: url('javascript:alert("XSS")'); }</style>`.

7. URL Parameter Injection:
   - Description: Cross-Site Scripting can occur by injecting code into URL parameters.
   - Example: Injecting `<script>alert('XSS')</script>` within a URL parameter like `http://example.com/?name=<script>alert('XSS')</script>`.

8. Input Field Injection:
   - Description: Cross-Site Scripting can be achieved by injecting code within input fields.
   - Example: Modifying the value of an input field with `<input type="text" value="<script>alert('XSS')</script>">`.

9. DOM-Based XSS:
   - Description: Cross-Site Scripting can exploit vulnerable client-side JavaScript code by manipulating the Document Object Model (DOM) 
   of the web page.

10. Cross-Site Script Inclusion (XSSI):
   - Description: Cross-Site Scripting can exploit insecure inclusion mechanisms that allow the injection of malicious scripts from external sources.

